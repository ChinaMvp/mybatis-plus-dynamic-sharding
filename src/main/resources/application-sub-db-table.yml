# 分库分表: 按照user_id进行分库，按照order_id进行分表
spring:
  shardingsphere:
    datasource:
      names: db0,db1 # 指定数据源名字，多数据源以逗号分隔
      db0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver #mysql-connector版本为5时，值为com.mysql.jdbc.Driver；mysql-connector版本为8时，值为com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/civilization_local_ds0?useUnicode=true&useSSL=false&characterEncoding=utf8&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
        username: root
        password: test
      db1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver # mysql-connector版本为5时，值为com.mysql.jdbc.Driver；mysql-connector版本为8时，值为com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/civilization_local_ds1?useUnicode=true&useSSL=false&characterEncoding=utf8&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
        username: root
        password: test

    sharding:
      default-data-source-name: db0 # 默认数据源
      tables: # 具体分片规则配置
        t_order: # 逻辑表名
          key-generator-column-name: order_id # 主键
          key-generator:
            column: order_id
            type: SNOWFLAKE # 使用雪花算法ID生成器
            props:
              worker.id: 1
          actual-data-nodes: db$->{0..1}.t_order_$->{0..1} # 实际的数据节点(数据源名.逻辑表名)
          # 分库策略
          database-strategy:
            inline: # 行表达式
              sharding-column: user_id
              algorithm-expression: db$->{user_id%2} # 按照user_id分库
          # 分表规则
          table-strategy:
            inline: # 行表达式
              sharding-column: order_id
              algorithm-expression: t_order_$->{order_id%2} # 按照order_id分表
        t_order_item: # 逻辑表名
          actual-data-nodes: db$->{0..1}.t_order_item_$->{0..1} # 实际的数据节点(数据源名.逻辑表名)
          # 分库策略
          database-strategy:
            inline: # 行表达式
              sharding-column: user_id
              algorithm-expression: db$->{user_id%2} # 按照user_id分库
          # 分表规则
          table-strategy:
            inline: # 行表达式
              sharding-column: order_id
              algorithm-expression: t_order_item_$->{order_id%2} # 按照order_id分表
      #配置绑定表关系(多个逻辑表之间配置绑定关系)
      binding-tables: t_order,t_order_item
    props:
      sql.show: true # 是否开启SQL显示
